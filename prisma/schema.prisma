// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id                  String   @id @default(cuid())
  address             String
  street_number       String?
  street_name         String?
  city                String
  state               String
  zip_code            String
  county              String?
  parcel_id           String?
  units               Int?
  sq_ft               Int?
  lot_size_sq_ft      Int?
  year_built          Int?
  property_type       String?  // commercial, multifamily, etc.
  property_subtype    String?  // apartment, office, retail, etc.
  listing_price       Float?
  description         String?
  listing_source      String?
  listing_url         String?
  tax_assessor_url    String?
  last_tax_update     DateTime?
  latitude            Float?
  longitude           Float?

  // New fields for property management
  sqft                Int?           // Alias for sq_ft for API compatibility
  property_sub_type   String?        // Alias for property_subtype
  lot_size            Int?           // Alias for lot_size_sq_ft
  asking_cap_rate     Float?
  noi                 Float?
  gross_income        Float?
  features            String?        // JSON string of property features array
  images              String?        // JSON string of image URLs array

  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relationships
  tax_assessments       TaxAssessment[]
  tax_payments          TaxPayment[]
  underwriting_analysis UnderwritingAnalysis[]
  financial_scenarios   FinancialScenario[]
  comparable_sales      ComparableSale[]

  @@index([zip_code])
  @@index([county, state])
  @@index([parcel_id])
}

model TaxAssessment {
  id                  String   @id @default(cuid())
  property_id         String
  assessment_year     Int
  assessed_value      Float?
  land_value          Float?
  improvement_value   Float?
  total_value         Float?
  tax_rate            Float?   // as decimal (e.g., 0.0125 for 1.25%)
  annual_taxes        Float?
  assessment_date     DateTime?
  exemptions          String?  // JSON string of exemptions
  property_class      String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  property            Property @relation(fields: [property_id], references: [id], onDelete: Cascade)

  @@index([property_id, assessment_year])
}

model TaxPayment {
  id              String   @id @default(cuid())
  property_id     String
  tax_year        Int
  amount_due      Float?
  amount_paid     Float?
  payment_date    DateTime?
  due_date        DateTime?
  penalty_fees    Float?
  interest_fees   Float?
  status          String?  // paid, unpaid, partial, delinquent
  installment     Int?     // for properties with payment plans
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  property        Property @relation(fields: [property_id], references: [id], onDelete: Cascade)

  @@index([property_id, tax_year])
}

model TaxAssessorSource {
  id                      String   @id @default(cuid())
  county                  String
  state                   String
  assessor_name           String?
  assessor_url            String
  search_url_pattern      String?  // URL pattern for searches
  search_method           String?  // address, parcel_id, owner_name
  data_format             String?  // JSON description of data structure
  selectors               String?  // JSON of CSS selectors for scraping
  requires_javascript     Boolean  @default(false)
  requires_authentication Boolean  @default(false)
  rate_limit_ms           Int      @default(2000)
  last_successful_scrape  DateTime?
  last_failed_scrape      DateTime?
  success_count           Int      @default(0)
  failure_count           Int      @default(0)
  is_active               Boolean  @default(true)
  notes                   String?
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  @@unique([county, state])
  @@index([state])
}

model ZipCodeMapping {
  id          String   @id @default(cuid())
  zip_code    String   @unique
  city        String
  state       String
  county      String
  latitude    Float?
  longitude   Float?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([state, county])
}

model UnderwritingAnalysis {
  id                          String   @id @default(cuid())
  property_id                 String
  analysis_date               DateTime @default(now())

  // Basic Property Info
  purchase_price              Float?
  down_payment_percent        Float?
  loan_amount                 Float?
  interest_rate               Float?
  loan_term_years             Int?

  // Income Analysis
  gross_rental_income         Float?
  vacancy_rate                Float?
  effective_gross_income      Float?

  // Expense Analysis
  property_taxes              Float?
  insurance                   Float?
  property_management         Float?
  maintenance_repairs         Float?
  utilities                   Float?
  other_expenses              Float?
  total_expenses              Float?

  // Financial Metrics
  net_operating_income        Float?
  cap_rate                    Float?
  cash_flow                   Float?
  cash_on_cash_return         Float?
  debt_service_coverage       Float?

  // Tax-Enhanced Metrics
  effective_tax_rate          Float?   // calculated from actual tax payments
  tax_assessed_vs_market      Float?   // ratio of assessed value to purchase price
  tax_trend_3_year            Float?   // 3-year tax increase trend
  tax_appeal_potential        Boolean? // if assessed value significantly higher than market

  created_at                  DateTime @default(now())
  updated_at                  DateTime @updatedAt

  property                    Property @relation(fields: [property_id], references: [id], onDelete: Cascade)

  @@index([property_id])
}

model ScrapeJob {
  id              String   @id @default(cuid())
  job_type        String   // tax_assessor, property_listing, market_data
  target_url      String?
  zip_code        String?
  property_id     String?
  status          String   // pending, running, completed, failed
  started_at      DateTime?
  completed_at    DateTime?
  error_message   String?
  retry_count     Int      @default(0)
  max_retries     Int      @default(3)
  priority        Int      @default(1)   // 1 = highest, 5 = lowest
  results         String?  // JSON string of scraped data
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@index([status, priority])
  @@index([job_type])
}

model Address {
  id                  String   @id @default(cuid())
  original_address    String
  normalized_address  String
  street_number       String?
  street_name         String?
  unit_number         String?
  city                String?
  state               String?
  zip_code            String?
  zip_plus_four       String?
  county              String?
  latitude            Float?
  longitude           Float?
  confidence_score    Float?   // 0-1, how confident we are in the normalization
  created_at          DateTime @default(now())

  @@unique([normalized_address])
  @@index([zip_code])
}

model MarketData {
  id                    String   @id @default(cuid())
  zip_code              String?
  county                String?
  metro_area            String?
  region                String?
  state                 String?

  // Cap Rates by Property Type
  multifamily_cap_rate  Float?
  office_cap_rate       Float?
  retail_cap_rate       Float?
  industrial_cap_rate   Float?

  // Market Metrics
  avg_rent_per_unit     Float?
  avg_rent_per_sqft     Float?
  vacancy_rate          Float?
  absorption_rate       Float?

  // Market Trends
  price_appreciation    Float?   // YoY percentage
  rent_growth           Float?   // YoY percentage
  inventory_months      Float?   // Months of inventory

  // Economic Indicators
  population_growth     Float?
  employment_growth     Float?
  median_income         Float?

  data_source           String   // realtyrates, milken, marcus_millichap
  data_type             String   // cap_rates, market_trends, economic
  measurement_date      DateTime
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@index([zip_code, data_source])
  @@index([metro_area, data_source])
  @@index([measurement_date])
}

model ComparableSale {
  id                String   @id @default(cuid())
  property_id       String?   // Reference property for comparison
  sale_property_id  String?   // Actual sold property

  // Property Details
  address           String
  city              String
  state             String
  zip_code          String
  property_type     String
  units             Int?
  sq_ft             Int?
  year_built        Int?

  // Sale Information
  sale_price        Float
  sale_date         DateTime
  price_per_unit    Float?
  price_per_sqft    Float?
  cap_rate          Float?

  // Market Context
  days_on_market    Int?
  listing_price     Float?
  price_reduction   Float?

  // Data Source
  transaction_source String   // mls, public_records, marcus_millichap
  confidence_score   Float?   // How comparable this sale is

  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  property          Property? @relation(fields: [property_id], references: [id])

  @@index([zip_code, sale_date])
  @@index([property_type, sale_date])
}

model FinancialScenario {
  id                      String   @id @default(cuid())
  property_id             String
  scenario_name           String   // base_case, optimistic, pessimistic

  // Assumptions
  purchase_price          Float
  down_payment_percent    Float
  interest_rate           Float
  loan_term_years         Int

  // Income Projections (10-year)
  year_1_gross_income     Float
  annual_rent_growth      Float
  vacancy_rate            Float

  // Expense Projections
  year_1_expenses         Float
  annual_expense_growth   Float
  capex_reserve_percent   Float

  // Exit Assumptions
  exit_year               Int?
  exit_cap_rate           Float?
  selling_costs_percent   Float?

  // Calculated Results
  irr                     Float?
  npv                     Float?
  equity_multiple         Float?
  average_coc_return      Float?

  // Risk Metrics
  break_even_occupancy    Float?
  sensitivity_score       Float?   // 1-10, how sensitive to assumptions

  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  property                Property @relation(fields: [property_id], references: [id], onDelete: Cascade)

  @@index([property_id, scenario_name])
}
